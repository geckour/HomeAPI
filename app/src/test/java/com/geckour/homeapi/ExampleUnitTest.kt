package com.geckour.homeapi

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {

    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }

    @Test
    fun `a`() {
        val sample = ""
        var current = '0'
        val result = sample.fold(mutableListOf<Int>()) { acc, c ->
            acc.apply {
                if (current != c) {
                    current = c
                    add(1)
                } else {
                    if (acc.size == 0) add(1)
                    acc[acc.lastIndex] = acc[acc.lastIndex] + 1
                }
            }
        }.map { it * 100 }.toString()
        result
    }

    @Test
    fun `b`() {
        val sample =

        var current = '0'
        val middle = sample.fold(mutableListOf<Pair<Char, Int>>()) { acc, c ->
            acc.apply {
                if (current != c) {
                    current = c
                    add(c to 1)
                } else {
                    if (acc.size == 0) add(c to 1)
                    acc[acc.lastIndex] = acc[acc.lastIndex].let { it.copy(second = it.second + 1) }
                }
            }
        }
        var result = ""
        middle.forEachIndexed { index, pair ->
            val prev = middle.getOrNull(index - 1)
            if (prev?.first == '1' && prev.second < 8) {
                result += when (pair.second) {
                    in 0..8 -> '0'
                    in 8..20 -> '1'
                    else -> '?'
                }
            }
        }
        result
    }
}